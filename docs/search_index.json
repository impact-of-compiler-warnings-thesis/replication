[["index.html", "The Impact of Compiler Warnings on Code Quality in C++ Projects Chapter 1 Impact of Compiler Warnings on Software Quality", " The Impact of Compiler Warnings on Code Quality in C++ Projects Albin Johansson &amp; Carl Holmberg 2023 Chapter 1 Impact of Compiler Warnings on Software Quality This is the replication package accompanying the Master thesis “The Impact of Compiler Warnings on Code Quality in C++ Projects” written by Albin Johansson and Carl Holmberg. "],["introduction.html", "Chapter 2 Introduction", " Chapter 2 Introduction This is the introduction section. "],["setup.html", "Chapter 3 Setup", " Chapter 3 Setup This page outlines the steps required to prepare the R environment. First we need to load the required packages. # Bayesian data analysis tools library(brms) # Miscellaneous plotting library(ggplot2) library(ggpattern) library(ggdag) Then we define some useful constants. major_categories &lt;- c(1, 2, 3, 5, 7) ordered_category_names &lt;- c(&quot;N&quot;, # category 1 &quot;A&quot;, # category 2 &quot;AE&quot;, # category 3 &quot;AP&quot;, # category 4 &quot;AEP&quot;, # category 5 &quot;AE+&quot;, # category 6 &quot;AEP+&quot;, # category 7 &quot;AP+&quot;, # category 8 &quot;E+&quot;, # category 9 &quot;A+&quot;, # category 10 &quot;E&quot; # category 11 ) We will also define some convenience functions. # Returns the number of days between a date and the analysis date. # We use February 28 as the reference date, otherwise it changes from day-to-day. get_age &lt;- function (yymmdd) { as.integer(difftime(&quot;2023-02-28&quot;, as.Date(yymmdd, &quot;%Y-%m-%d&quot;), units=&quot;days&quot;)) } # Adds columns for each metric that are relative to 1,000 lines-of-code. add_scaled_metrics &lt;- function(data) { data$bugs_kloc &lt;- (data$bugs / data$loc) * 1000 data$code_smells_kloc &lt;- (data$code_smells / data$loc) * 1000 data$critical_violations_kloc &lt;- (data$critical_violations / data$loc) * 1000 data$major_violations_kloc &lt;- (data$major_violations / data$loc) * 1000 data$minor_violations_kloc &lt;- (data$minor_violations / data$loc) * 1000 data$security_hotspots_kloc &lt;- (data$security_hotspots / data$loc) * 1000 data$vulnerabilities_kloc &lt;- (data$vulnerabilities / data$loc) * 1000 data$duplicated_lines_kloc &lt;- (data$duplicated_lines / data$loc) * 1000 data$cyclomatic_complexity_kloc &lt;- (data$cyclomatic_complexity / data$loc) * 1000 data$cognitive_complexity_kloc &lt;- (data$cognitive_complexity / data$loc) * 1000 data } # Returns 2 for projects that use warnings, 1 otherwise. uses_warnings &lt;- function(categories) { ifelse(categories %in% 2:11, 2, 1) } # Utility function used to fit brms models fit_model &lt;- function(name, formula, priors, data, seed) { brm( formula, family=gaussian, prior=priors, data=data, iter=10000, warmup=5000, chains=4, cores=4, file=paste(&quot;fits&quot;, name, sep=&quot;/&quot;), file_refit=&quot;on_change&quot;, save_pars=save_pars(all=TRUE), seed=seed ) } # Converts a standardized value to the natural scale, given the source data. restore_from_std &lt;- function(value, data) { value * sd(data) + mean(data) } # Returns a data frame with columns for standardized and natural scale means determine_natural_scale_means &lt;- function(std_means, data, precision=2) { means &lt;- data.frame(row.names=ordered_category_names, &quot;std&quot;=std_means) means$natural &lt;- round(restore_from_std(means$std, data), digits=precision) means } # This function creates a data frame with summary data in the natural scale, # similar to what you get from the brms &quot;summary&quot; function. create_natural_scale_summary_df &lt;- function(fit, raw_data, precision=2) { fit_df &lt;- as.data.frame(fit) intervals &lt;- posterior_interval(fit, prob=0.90) # 0.05-0.95 std_means &lt;- c(round(mean(fit_df$b_category1), digits=precision), round(mean(fit_df$b_category2), digits=precision), round(mean(fit_df$b_category3), digits=precision), round(mean(fit_df$b_category5), digits=precision), round(mean(fit_df$b_category7), digits=precision)) std_sd &lt;- c(round(sd(fit_df$b_category1), digits=precision), round(sd(fit_df$b_category2), digits=precision), round(sd(fit_df$b_category3), digits=precision), round(sd(fit_df$b_category5), digits=precision), round(sd(fit_df$b_category7), digits=precision)) std_lower &lt;- c(round(intervals[1, 1], digits=precision), round(intervals[2, 1], digits=precision), round(intervals[3, 1], digits=precision), round(intervals[5, 1], digits=precision), round(intervals[7, 1], digits=precision)) std_upper &lt;- c(round(intervals[1, 2], digits=precision), round(intervals[2, 2], digits=precision), round(intervals[3, 2], digits=precision), round(intervals[5, 2], digits=precision), round(intervals[7, 2], digits=precision)) natural_means &lt;- round(restore_from_std(std_means, raw_data), digits=precision) natural_sd &lt;- round(restore_from_std(std_sd, raw_data), digits=precision) natural_lower &lt;- round(restore_from_std(std_lower, raw_data), digits=precision) natural_upper &lt;- round(restore_from_std(std_upper, raw_data), digits=precision) data.frame(row.names=c(&quot;N&quot;, &quot;A&quot;, &quot;AE&quot;, &quot;AEP&quot;, &quot;AEP+&quot;), check.names=FALSE, `Mean`=natural_means, `SD`=natural_sd, `0.05 CI`=natural_lower, `0.95 CI`=natural_upper) } # Plots credible intervals for all categories based on a fit model plot_intervals_of_categories &lt;- function(model) { mcmc_plot(model, type=&quot;intervals&quot;, variable=&quot;b_category&quot;, regex=TRUE, point_size=2, prob=0.5, # Inner region density mass percentage prob_outer=0.90 # Outer region density mass percentage ) + theme_default(base_family=&quot;sans&quot;, base_size=14) } # Plots credible intervals for the major categories based on a fit model plot_intervals_of_major_categories &lt;- function(fit) { mcmc_plot(fit, type=&quot;intervals&quot;, variable=c( &quot;b_category1&quot;, # N &quot;b_category2&quot;, # A &quot;b_category3&quot;, # AE &quot;b_category5&quot;, # AEP &quot;b_category7&quot; # AEP+ ), regex=FALSE, point_size=2, prob=0.5, # Inner region density mass percentage prob_outer=0.90 # Outer region density mass percentage ) + theme_default(base_family=&quot;sans&quot;, base_size=14) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;N&quot;, &quot;b_category2&quot;=&quot;A&quot;, &quot;b_category3&quot;=&quot;AE&quot;, &quot;b_category5&quot;=&quot;AEP&quot;, &quot;b_category7&quot;=&quot;AEP+&quot; )) } # Plots a prior predictive check plot plot_priors &lt;- function(fit, xlab) { pp_check(fit, ndraws=25) + theme_default(base_family=&quot;sans&quot;, base_size=14) + labs(title=&quot;Prior predictive checks&quot;, x=xlab, y=&quot;Probability density&quot;) } The data we need has been prepared in a separate CSV file, all we need to do is load it. However, we will need to create some new columns with metric values that are scaled according to the lines of code in each sample. This is so that we can compare metrics from projects of different sizes. df &lt;- read.csv(&quot;data/data_frame.csv&quot;) # Include columns with metrics scaled per KLOC df &lt;- add_scaled_metrics(df) The following provides information about the used R session. sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.4 ## ## Matrix products: default ## BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: Europe/Stockholm ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] ggdag_0.2.8 ggpattern_1.0.1 ggplot2_3.4.2 brms_2.19.0 Rcpp_1.0.10 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.2.0 dplyr_1.1.2 farver_2.1.1 loo_2.6.0 ## [5] fastmap_1.1.1 tensorA_0.36.2 shinystan_2.6.0 promises_1.2.0.1 ## [9] shinyjs_2.1.0 digest_0.6.31 mime_0.12 lifecycle_1.0.3 ## [13] StanHeaders_2.21.0-7 ellipsis_0.3.2 processx_3.8.1 magrittr_2.0.3 ## [17] posterior_1.4.1 compiler_4.3.0 sass_0.4.5 rlang_1.1.0 ## [21] tools_4.3.0 yaml_2.3.7 igraph_1.4.2 utf8_1.2.3 ## [25] knitr_1.42 prettyunits_1.1.1 bridgesampling_1.1-2 htmlwidgets_1.6.2 ## [29] pkgbuild_1.4.0 plyr_1.8.8 dygraphs_1.1.1.6 abind_1.4-5 ## [33] miniUI_0.1.1.1 purrr_1.0.1 withr_2.5.0 grid_4.3.0 ## [37] stats4_4.3.0 fansi_1.0.4 xts_0.13.1 xtable_1.8-4 ## [41] colorspace_2.1-0 inline_0.3.19 scales_1.2.1 gtools_3.9.4 ## [45] cli_3.6.1 mvtnorm_1.1-3 rmarkdown_2.21 crayon_1.5.2 ## [49] generics_0.1.3 RcppParallel_5.1.7 rstudioapi_0.14 reshape2_1.4.4 ## [53] cachem_1.0.7 rstan_2.21.8 stringr_1.5.0 shinythemes_1.2.0 ## [57] bayesplot_1.10.0 parallel_4.3.0 matrixStats_0.63.0 base64enc_0.1-3 ## [61] vctrs_0.6.2 Matrix_1.5-4 jsonlite_1.8.4 bookdown_0.33 ## [65] callr_3.7.3 crosstalk_1.2.0 tidyr_1.3.0 jquerylib_0.1.4 ## [69] glue_1.6.2 codetools_0.2-19 ps_1.7.5 DT_0.27 ## [73] distributional_0.3.2 stringi_1.7.12 gtable_0.3.3 later_1.3.0 ## [77] munsell_0.5.0 tibble_3.2.1 colourpicker_1.2.0 pillar_1.9.0 ## [81] htmltools_0.5.5 Brobdingnag_1.2-9 R6_2.5.1 tidygraph_1.2.3 ## [85] evaluate_0.20 shiny_1.7.4 lattice_0.21-8 markdown_1.6 ## [89] backports_1.4.1 threejs_0.3.3 bslib_0.4.2 httpuv_1.6.9 ## [93] rstantools_2.3.1 coda_0.19-4 gridExtra_2.3 nlme_3.1-162 ## [97] checkmate_2.1.0 xfun_0.39 zoo_1.8-12 pkgconfig_2.0.3 "],["causal-analysis.html", "Chapter 4 Causal analysis 4.1 DAG", " Chapter 4 Causal analysis 4.1 DAG The following DAG illustrates the casual relationships assumed to be true for the purposes of the study. C: Culture W: Warnings R: Refactoring D: Defects S: Size library(dagitty) dag &lt;- dagitty(&quot;dag { C -&gt; R W -&gt; R D -&gt; R D -&gt; W S -&gt; D }&quot;) tidy_dagitty(dag, layout=&quot;fr&quot;) %&gt;% ggplot(aes(x=x, y=y, xend=xend, yend=yend)) + geom_dag_node() + geom_dag_text() + geom_dag_edges() + theme_dag() "],["data-summary.html", "Chapter 5 Data summary 5.1 Plot category sample distribution 5.2 Prepare for metric summary plots 5.3 Category overview plots 5.4 Metric summary plots", " Chapter 5 Data summary 5.1 Plot category sample distribution We assign indices to each of the warning categories as follows. The “major” categories are categories with more rigorous sample sizes, so their analysis results are more reliable. Subsequent analysis steps focus on these major categories. 1 = N 2 = A 3 = AE 4 = AP 5 = AEP 6 = AE+ 7 = AEP+ 8 = AP+ 9 = E+ 10 = A+ 11 = E category_labels &lt;- c(&quot;1&quot;=&quot;N&quot;, &quot;2&quot;=&quot;A&quot;, &quot;3&quot;=&quot;AE&quot;, &quot;4&quot;=&quot;AP&quot;, &quot;5&quot;=&quot;AEP&quot;, &quot;6&quot;=&quot;AE+&quot;, &quot;7&quot;=&quot;AEP+&quot;, &quot;8&quot;=&quot;AP+&quot;, &quot;9&quot;=&quot;E+&quot;, &quot;10&quot;=&quot;A+&quot;, &quot;11&quot;=&quot;E&quot;) Now we plot the amount of samples in each category, in a bar chart. # Used to dictate the patters used for the bars in each category category_patterns &lt;- c( &quot;N&quot;=&quot;none&quot;, &quot;A&quot;=&quot;stripe&quot;, &quot;AE&quot;=&quot;none&quot;, &quot;AP&quot;=&quot;stripe&quot;, &quot;AEP&quot;=&quot;none&quot;, &quot;AE+&quot;=&quot;stripe&quot;, &quot;AEP+&quot;=&quot;none&quot;, &quot;AP+&quot;=&quot;stripe&quot;, &quot;E+&quot;=&quot;none&quot;, &quot;A+&quot;=&quot;stripe&quot;, &quot;E&quot;=&quot;none&quot; ) # Colors assigned to each category category_colors &lt;- c( &quot;1&quot;=&quot;#40004b&quot;, &quot;2&quot;=&quot;#762a83&quot;, &quot;3&quot;=&quot;#9970ab&quot;, &quot;4&quot;=&quot;#c2a5cf&quot;, &quot;5&quot;=&quot;#e7d4e8&quot;, &quot;6&quot;=&quot;#f7f7f7&quot;, &quot;7&quot;=&quot;#d9f0d3&quot;, &quot;8&quot;=&quot;#a6dba0&quot;, &quot;9&quot;=&quot;#5aae61&quot;, &quot;10&quot;=&quot;#1b7837&quot;, &quot;11&quot;=&quot;#00441b&quot; ) ggplot(df, aes(x=category, fill=factor(category))) + theme_default(base_family=&quot;sans&quot;, base_size=14) + theme(legend.position=&quot;bottom&quot;) + guides(fill=guide_legend(title=NULL, override.aes=list( pattern=category_patterns ))) + geom_bar_pattern(color=&quot;#000000F0&quot;, linewidth=0.5, position=position_dodge(preserve=&quot;single&quot;), pattern_fill=&quot;black&quot;, pattern_angle=45, pattern_density=0.1, pattern_spacing=0.025, pattern_key_scale_factor=0.6, pattern=category_patterns) + scale_x_discrete(labels=NULL) + scale_fill_manual(labels=category_labels, values=category_colors) + labs(title=&quot;Distribution of samples&quot;, x=&quot;&quot;, y=&quot;Count&quot;) + geom_hline(yintercept=1:6 * 5, alpha=0.2) + scale_y_continuous(breaks=1:6 * 5) The bars will be ordered according to the different categories, and color coded. 5.2 Prepare for metric summary plots To provide summary plots for the various metrics, we will define a helper function that produces color-coded bar plots. Here we will only include the major categories. plot_barplot &lt;- function(data, x, y) { ggplot(data, aes(x=x, y=y, fill=factor(category))) + theme_default(base_family=&quot;sans&quot;, base_size=14) + theme(legend.position=&quot;bottom&quot;) + guides(fill=guide_legend(title=NULL)) + geom_col(color=&quot;#000000F0&quot;, linewidth=0.5) + scale_x_discrete(labels=NULL) + scale_fill_manual(labels=c(&quot;1&quot;=&quot;N&quot;, &quot;2&quot;=&quot;A&quot;, &quot;3&quot;=&quot;AE&quot;, &quot;5&quot;=&quot;AEP&quot;, &quot;7&quot;=&quot;AEP+&quot;), values=c(&quot;1&quot;=&quot;#7b3294&quot;, &quot;2&quot;=&quot;#c2a5cf&quot;, &quot;3&quot;=&quot;#f7f7f7&quot;, &quot;5&quot;=&quot;#a6dba0&quot;, &quot;7&quot;=&quot;#008837&quot;)) } major_samples_barplot &lt;- function(data, metric) { plot_barplot(data, reorder(data$name, data$category), metric) } major_category_summary_barplot &lt;- function(data, metric) { plot_barplot(data, data$category, metric) } Additionally, we will need to create a new data frame where the samples that do not belong any of the major categories are excluded. df_major = df[df$category %in% major_categories, ] 5.3 Category overview plots This section includes plots that illustrate general traits of samples across the major categories. 5.3.1 LOC per sample major_samples_barplot(df_major, df_major$loc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;LOC&quot;) + geom_hline(yintercept=1:7 * 100000, alpha=0.2) + scale_y_continuous(breaks=1:7 * 100000) 5.3.2 LOC per category loc_per_category &lt;- aggregate(loc ~ category, df_major, mean) loc_per_category$category &lt;- factor(loc_per_category$category) major_category_summary_barplot(loc_per_category, loc_per_category$loc) + labs(title=&quot;Mean LOC per category&quot;, x=&quot;Categories&quot;, y=&quot;LOC&quot;) + geom_hline(yintercept=1:9 * 20000, alpha=0.2) + scale_y_continuous(breaks=1:9 * 20000) 5.3.3 Stars per category stars_per_category &lt;- aggregate(stars ~ category, df_major, mean) stars_per_category$category &lt;- factor(stars_per_category$category) major_category_summary_barplot(stars_per_category, stars_per_category$stars) + labs(title=&quot;Mean stargazers per category&quot;, x=&quot;Categories&quot;, y=&quot;Stargazers&quot;) + geom_hline(yintercept=1:6 * 1000, alpha=0.2) + scale_y_continuous(breaks=1:6 * 1000) 5.3.4 Age per sample df_major$age &lt;- get_age(df_major$created_at) major_samples_barplot(df_major, df_major$age) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Age (days)&quot;) + geom_hline(yintercept=1:5 * 1000, alpha=0.2) + scale_y_continuous(breaks=1:5 * 1000) 5.3.5 Age per category age_per_category &lt;- aggregate(age ~ category, df_major, mean) age_per_category$category &lt;- factor(age_per_category$category) major_category_summary_barplot(age_per_category, age_per_category$age) + labs(title=&quot;Mean Age per Category&quot;, x=&quot;Categories&quot;, y=&quot;Age (days)&quot;) + geom_hline(yintercept=1:6 * 500, alpha=0.2) + scale_y_continuous(breaks=1:6 * 500) 5.4 Metric summary plots We can now use the major_samples_barplot function to plot the scaled values for every sample in the major categories. 5.4.1 Bugs major_samples_barplot(df_major, df_major$bugs_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Bugs / KLOC&quot;) + geom_hline(yintercept=1:18 / 2, alpha=0.2) + scale_y_continuous(breaks=1:18 / 2) 5.4.2 Code smells major_samples_barplot(df_major, df_major$code_smells_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Code smells / KLOC&quot;) + geom_hline(yintercept=50 * 1:13, alpha=0.2) + scale_y_continuous(breaks=50 * 1:13) 5.4.3 Critical violations major_samples_barplot(df_major, df_major$critical_violations_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Critical violations / KLOC&quot;) + geom_hline(yintercept=10 * 1:11, alpha=0.2) + scale_y_continuous(breaks=10 * 1:11) 5.4.4 Major violations major_samples_barplot(df_major, df_major$major_violations_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Major violations / KLOC&quot;) + geom_hline(yintercept=50 * 1:12, alpha=0.2) + scale_y_continuous(breaks=50 * 1:12) 5.4.5 Minor violations major_samples_barplot(df_major, df_major$minor_violations_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Minor violations / KLOC&quot;) + geom_hline(yintercept=10 * 1:10, alpha=0.2) + scale_y_continuous(breaks=10 * 1:10) 5.4.6 Security hotspots major_samples_barplot(df_major, df_major$security_hotspots_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Security hotspots / KLOC&quot;) + geom_hline(yintercept=1:11 / 2, alpha=0.2) + scale_y_continuous(breaks=1:11 / 2) 5.4.7 Vulnerabilities major_samples_barplot(df_major, df_major$vulnerabilities_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Vulnerabilities / KLOC&quot;) + geom_hline(yintercept=1:6 / 20, alpha=0.2) + scale_y_continuous(breaks=1:6 / 20) 5.4.8 Cyclomatic complexity major_samples_barplot(df_major, df_major$cyclomatic_complexity_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Cyclomatic complexity / KLOC&quot;) + geom_hline(yintercept=1:12 * 100, alpha=0.2) + scale_y_continuous(breaks=1:12 * 100) 5.4.9 Cognitive complexity major_samples_barplot(df_major, df_major$cognitive_complexity_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Cognitive complexity / KLOC&quot;) + geom_hline(yintercept=1:8 * 50, alpha=0.2) + scale_y_continuous(breaks=1:8 * 50) 5.4.10 Duplicated lines major_samples_barplot(df_major, df_major$duplicated_lines_kloc) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Duplicated lines / KLOC&quot;) + geom_hline(yintercept=1:12 * 50, alpha=0.2) + scale_y_continuous(breaks=1:12 * 50) 5.4.11 Technical Debt Ratio major_samples_barplot(df_major, df_major$sqale_debt_ratio) + labs(title=&quot;Overview of all major samples&quot;, x=&quot;Samples&quot;, y=&quot;Technical Debt Ratio&quot;) + geom_hline(yintercept=1:5 * 2, alpha=0.2) + scale_y_continuous(breaks=1:5 * 2) "],["bugs-1.html", "Chapter 6 Bugs 6.1 Prepare data 6.2 Define models 6.3 Compare models 6.4 Prior predictive checks 6.5 Determine natural scale values 6.6 Intervals of major categories 6.7 Warnings versus no warnings", " Chapter 6 Bugs This section covers the analysis relating to the “bugs” metric. 6.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230303 # Returns a list of standardized data necessary for the analysis. create_bugs_data &lt;- function(data) { list( bugs_kloc_std=scale(data$bugs_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), size_std=scale(data$loc), files_std=scale(data$files), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_bugs_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_bugs_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 6.2 Define models 6.2.1 B1 fit_model_b1 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } b1 &lt;- fit_model_b1(&quot;b1&quot;, data) 6.2.2 B2 fit_model_b2 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } b2 &lt;- fit_model_b2(&quot;b2&quot;, data) 6.2.3 B3 fit_model_b3 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } b3 &lt;- fit_model_b3(&quot;b3&quot;, data) 6.2.4 B4 fit_model_b4 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } b4 &lt;- fit_model_b4(&quot;b4&quot;, data) 6.2.5 B5 fit_model_b5 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } b5 &lt;- fit_model_b5(&quot;b5&quot;, data) 6.2.6 B6 fit_model_b6 &lt;- function(name, data) { fit_model(name, &quot;bugs_kloc_std ~ 0 + category + contributors_std + stars_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } b6 &lt;- fit_model_b6(&quot;b6&quot;, data) 6.3 Compare models b1 &lt;- add_criterion(b1, criterion=&quot;loo&quot;, moment_match=TRUE) b2 &lt;- add_criterion(b2, criterion=&quot;loo&quot;, moment_match=TRUE) b3 &lt;- add_criterion(b3, criterion=&quot;loo&quot;, moment_match=TRUE) b4 &lt;- add_criterion(b4, criterion=&quot;loo&quot;, moment_match=TRUE) b5 &lt;- add_criterion(b5, criterion=&quot;loo&quot;, moment_match=TRUE) b6 &lt;- add_criterion(b6, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(b1, b2, b3, b4, b5, b6, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## b1 0.0 0.0 -194.9 40.8 22.0 16.9 389.8 81.6 ## b4 -1.0 0.1 -196.0 40.8 22.8 17.2 391.9 81.6 ## b2 -1.1 0.4 -196.0 41.1 22.6 17.0 392.0 82.3 ## b3 -1.6 1.1 -196.6 41.7 23.9 17.6 393.1 83.4 ## b5 -2.2 0.9 -197.1 41.3 23.8 17.2 394.2 82.7 ## b6 -3.0 0.7 -197.9 41.0 24.4 17.3 395.8 82.0 6.4 Prior predictive checks plot_priors(b1, &quot;Bugs per KLOC (std)&quot;) 6.5 Determine natural scale values summary(b1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: bugs_kloc_std ~ 0 + category ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.27 0.19 -0.10 0.64 1.00 43395 14610 ## category2 0.24 0.24 -0.23 0.71 1.00 42627 14967 ## category3 -0.02 0.20 -0.41 0.37 1.00 40363 13926 ## category4 0.37 0.45 -0.51 1.25 1.00 45221 14595 ## category5 -0.28 0.23 -0.74 0.17 1.00 44279 14509 ## category6 -0.20 0.33 -0.86 0.45 1.00 42461 13622 ## category7 -0.23 0.20 -0.62 0.16 1.00 40914 14964 ## category8 0.47 0.71 -0.91 1.86 1.00 41707 13361 ## category9 -0.02 0.71 -1.40 1.40 1.00 44840 14983 ## category10 -0.29 0.50 -1.26 0.70 1.00 43875 14189 ## category11 -0.10 0.71 -1.49 1.29 1.00 40663 15519 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.00 0.07 0.89 1.14 1.00 33522 15375 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(b1, df$bugs_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 0.97 0.88 0.64 1.31 ## A 0.94 0.94 0.50 1.37 ## AE 0.65 0.89 0.29 1.00 ## AEP 0.37 0.92 -0.05 0.78 ## AEP+ 0.42 0.89 0.07 0.78 6.6 Intervals of major categories plot_intervals_of_major_categories(b1) + labs(title=&quot;B1&quot;, x=&quot;Bugs per KLOC (std)&quot;) 6.7 Warnings versus no warnings b1_factor_uses_warnings &lt;- fit_model_b1(&quot;b1_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(b1_factor_uses_warnings) + labs(title=&quot;B1&quot;, x=&quot;Bugs per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["code-smells-1.html", "Chapter 7 Code Smells 7.1 Prepare data 7.2 Define models 7.3 Compare models 7.4 Prior predictive checks 7.5 Determine natural scale values 7.6 Intervals of major categories 7.7 Warnings versus no warnings 7.8 Without outliers", " Chapter 7 Code Smells This section covers the analysis relating to the “code smells” metric. 7.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230302 # Returns a list of standardized data necessary for the analysis. create_code_smells_data &lt;- function(data) { list( code_smells_kloc_std=scale(data$code_smells_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_code_smells_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_code_smells_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 7.2 Define models 7.2.1 CS1 fit_model_cs1 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } cs1 &lt;- fit_model_cs1(&quot;cs1&quot;, data) 7.2.2 CS2 fit_model_cs2 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs2 &lt;- fit_model_cs2(&quot;cs2&quot;, data) 7.2.3 CS3 fit_model_cs3 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs3 &lt;- fit_model_cs3(&quot;cs3&quot;, data) 7.2.4 CS4 fit_model_cs4 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs4 &lt;- fit_model_cs4(&quot;cs4&quot;, data) 7.2.5 CS5 fit_model_cs5 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs5 &lt;- fit_model_cs5(&quot;cs5&quot;, data) 7.2.6 CS6 fit_model_cs6 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs6 &lt;- fit_model_cs6(&quot;cs6&quot;, data) 7.2.7 CS7 fit_model_cs7 &lt;- function(name, data) { fit_model(name, &quot;code_smells_kloc_std ~ 0 + category + contributors_std + stars_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cs7 &lt;- fit_model_cs7(&quot;cs7&quot;, data) 7.3 Compare models cs1 &lt;- add_criterion(cs1, criterion=&quot;loo&quot;, moment_match=TRUE) cs2 &lt;- add_criterion(cs2, criterion=&quot;loo&quot;, moment_match=TRUE) cs3 &lt;- add_criterion(cs3, criterion=&quot;loo&quot;, moment_match=TRUE) cs4 &lt;- add_criterion(cs4, criterion=&quot;loo&quot;, moment_match=TRUE) cs5 &lt;- add_criterion(cs5, criterion=&quot;loo&quot;, moment_match=TRUE) cs6 &lt;- add_criterion(cs6, criterion=&quot;loo&quot;, moment_match=TRUE) cs7 &lt;- add_criterion(cs7, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(cs1, cs2, cs3, cs4, cs5, cs6, cs7, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## cs6 0.0 0.0 -197.1 47.9 25.6 21.1 394.2 95.8 ## cs3 -0.6 1.2 -197.8 48.8 25.5 21.5 395.5 97.7 ## cs5 -0.7 0.6 -197.8 48.5 26.4 22.0 395.7 96.9 ## cs4 -1.4 1.7 -198.5 49.3 25.9 21.8 397.1 98.7 ## cs1 -1.5 2.5 -198.6 50.3 26.4 22.6 397.2 100.5 ## cs7 -1.8 0.8 -198.9 48.6 26.9 22.1 397.9 97.3 ## cs2 -2.0 2.8 -199.1 50.7 27.8 23.6 398.2 101.4 7.4 Prior predictive checks plot_priors(cs6, &quot;Code smells per KLOC (std)&quot;) 7.5 Determine natural scale values summary(cs6) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: code_smells_kloc_std ~ 0 + category + contributors_std + age_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.08 0.20 -0.31 0.46 1.00 43352 16758 ## category2 0.10 0.25 -0.38 0.58 1.00 44859 14877 ## category3 -0.09 0.21 -0.49 0.32 1.00 45733 15348 ## category4 -0.02 0.45 -0.92 0.87 1.00 44417 14650 ## category5 0.34 0.24 -0.12 0.81 1.00 45548 15276 ## category6 -0.17 0.34 -0.84 0.50 1.00 44338 14743 ## category7 -0.19 0.21 -0.60 0.21 1.00 45323 14334 ## category8 -0.07 0.72 -1.48 1.37 1.00 47533 15152 ## category9 -0.16 0.71 -1.55 1.23 1.00 46947 13614 ## category10 -0.17 0.51 -1.19 0.83 1.00 47265 15777 ## category11 -0.16 0.72 -1.56 1.25 1.00 44244 14336 ## contributors_std -0.16 0.10 -0.36 0.04 1.00 34954 15826 ## age_std 0.05 0.10 -0.16 0.25 1.00 33251 16719 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.01 0.07 0.89 1.15 1.00 34375 15208 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cs6, df$code_smells_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 71.45 79.07 50.50 91.76 ## A 72.72 82.24 47.33 98.11 ## AE 60.66 79.70 39.71 82.24 ## AEP 87.95 81.60 63.20 112.71 ## AEP+ 54.31 79.70 32.72 75.89 7.6 Intervals of major categories plot_intervals_of_major_categories(cs6) + labs(title=&quot;CS6&quot;, x=&quot;Code smells per KLOC (std)&quot;) 7.7 Warnings versus no warnings # Fit CS6 using data that uses binary factor for usage of warnings cs6_factor_uses_warnings &lt;- fit_model_cs6(&quot;cs6_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(cs6_factor_uses_warnings) + labs(title=&quot;CS6&quot;, x=&quot;Code smells per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) 7.8 Without outliers There are outliers in category AEP and AEP+, “clipp” and “hana”, which bias the analysis results. Here we remove these samples and fit CS2 to the trimmed data. # Prepare version of data frame without the outliers df_no_outliers &lt;- df df_no_outliers &lt;- df_no_outliers[df_no_outliers$name != &quot;clipp&quot;,] df_no_outliers &lt;- df_no_outliers[df_no_outliers$name != &quot;hana&quot;,] # Prepare data for analysis data_no_outliers &lt;- create_code_smells_data(df_no_outliers) data_no_outliers$category &lt;- factor(df_no_outliers$category) # Fit CS6 using the trimmed data cs6_no_outliers &lt;- fit_model_cs6(&quot;cs6_no_outliers&quot;, data_no_outliers) summary(cs6_no_outliers) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: code_smells_kloc_std ~ 0 + category + contributors_std + age_std ## Data: data (Number of observations: 125) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.40 0.19 0.03 0.77 1.00 39711 15546 ## category2 0.38 0.24 -0.09 0.86 1.00 48907 14149 ## category3 -0.05 0.20 -0.43 0.34 1.00 48170 15761 ## category4 0.13 0.44 -0.75 0.98 1.00 45427 14400 ## category5 -0.14 0.23 -0.60 0.32 1.00 47266 15101 ## category6 -0.22 0.33 -0.87 0.42 1.00 43165 15140 ## category7 -0.47 0.20 -0.87 -0.07 1.00 42743 15419 ## category8 0.01 0.70 -1.36 1.37 1.00 46777 15522 ## category9 -0.15 0.69 -1.50 1.22 1.00 45094 14950 ## category10 -0.32 0.50 -1.27 0.65 1.00 45647 16024 ## category11 -0.19 0.70 -1.56 1.19 1.00 47978 15778 ## contributors_std -0.12 0.10 -0.32 0.07 1.00 34250 15852 ## age_std 0.07 0.10 -0.13 0.27 1.00 33194 16763 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.97 0.06 0.86 1.11 1.00 32302 14876 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cs6_no_outliers, df_no_outliers$code_smells_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 73.83 66.68 63.27 84.04 ## A 73.15 68.38 59.87 86.77 ## AE 58.51 67.02 47.61 69.74 ## AEP 55.44 68.04 42.50 68.38 ## AEP+ 44.20 67.02 32.63 55.78 plot_intervals_of_major_categories(cs6_no_outliers) + labs(title=&quot;CS6 (culled)&quot;, x=&quot;Code smells per KLOC (std)&quot;) data_no_outliers_factor_uses_warnings &lt;- create_code_smells_data(df_no_outliers) data_no_outliers_factor_uses_warnings$category &lt;- factor(uses_warnings(df_no_outliers$category)) # Fit CS6 using the trimmed data, but with binary warning category factor cs6_no_outliers_factor_uses_warnings &lt;- fit_model_cs6(&quot;cs6_data_no_outliers_factor_uses_warnings&quot;, data_no_outliers_factor_uses_warnings) plot_intervals_of_categories(cs6_no_outliers_factor_uses_warnings) + labs(title=&quot;CS6 (culled)&quot;, x=&quot;Code smells per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["critical-violations-1.html", "Chapter 8 Critical Violations 8.1 Prepare Data 8.2 Define Models 8.3 Compare models 8.4 Prior predictive checks 8.5 Determine natural scale values 8.6 Intervals of major categories 8.7 Warnings versus no warnings", " Chapter 8 Critical Violations This section covers the analysis relating to the “critical violations” metric. 8.1 Prepare Data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230322 # Returns a list of standardized data necessary for the analysis. create_critical_violations_data &lt;- function(data) { list( critical_violations_kloc_std=scale(data$critical_violations_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_critical_violations_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_critical_violations_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 8.2 Define Models 8.2.1 CV1 fit_model_cv1 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class = b), prior(exponential(1), class = sigma) ), data, model_seed) } cv1 &lt;- fit_model_cv1(&quot;cv1&quot;, data) 8.2.2 CV2 fit_model_cv2 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv2 &lt;- fit_model_cv2(&quot;cv2&quot;, data) 8.2.3 CV3 fit_model_cv3 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv3 &lt;- fit_model_cv3(&quot;cv3&quot;, data) 8.2.4 CV4 fit_model_cv4 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv4 &lt;- fit_model_cv4(&quot;cv4&quot;, data) 8.2.5 CV5 fit_model_cv5 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv5 &lt;- fit_model_cv5(&quot;cv5&quot;, data) 8.2.6 CV6 fit_model_cv6 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv6 &lt;- fit_model_cv6(&quot;cv6&quot;, data) 8.2.7 CV7 fit_model_cv7 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv7 &lt;- fit_model_cv7(&quot;cv7&quot;, data) 8.2.8 CV8 fit_model_cv8 &lt;- function(name, data) { fit_model(name, &quot;critical_violations_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class = b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class = sigma) ), data, model_seed) } cv8 &lt;- fit_model_cv8(&quot;cv8&quot;, data) 8.3 Compare models cv1 &lt;- add_criterion(cv1, criterion=&quot;loo&quot;, moment_match=TRUE) cv2 &lt;- add_criterion(cv2, criterion=&quot;loo&quot;, moment_match=TRUE) cv3 &lt;- add_criterion(cv3, criterion=&quot;loo&quot;, moment_match=TRUE) cv4 &lt;- add_criterion(cv4, criterion=&quot;loo&quot;, moment_match=TRUE) cv5 &lt;- add_criterion(cv5, criterion=&quot;loo&quot;, moment_match=TRUE) cv6 &lt;- add_criterion(cv6, criterion=&quot;loo&quot;, moment_match=TRUE) cv7 &lt;- add_criterion(cv7, criterion=&quot;loo&quot;, moment_match=TRUE) cv8 &lt;- add_criterion(cv8, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(cv1, cv2, cv3, cv4, cv5, cv6, cv7, cv8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## cv1 0.0 0.0 -185.0 22.6 11.5 5.3 370.0 45.1 ## cv4 -0.4 0.7 -185.4 22.7 12.1 5.4 370.7 45.3 ## cv3 -0.5 0.4 -185.5 22.4 11.7 5.2 371.0 44.7 ## cv2 -0.6 0.5 -185.6 22.4 11.9 5.3 371.1 44.8 ## cv6 -0.8 0.3 -185.8 22.5 12.0 5.3 371.5 44.9 ## cv5 -0.8 0.6 -185.8 22.2 12.3 5.5 371.6 44.5 ## cv8 -1.2 1.0 -186.2 21.9 12.9 5.6 372.3 43.8 ## cv7 -1.2 0.6 -186.2 22.2 12.2 5.3 372.4 44.4 8.4 Prior predictive checks plot_priors(cv1, &quot;Critical violations per KLOC (std)&quot;) 8.5 Determine natural scale values summary(cv1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: critical_violations_kloc_std ~ 0 + category ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.46 0.18 0.10 0.81 1.00 39529 14840 ## category2 0.15 0.24 -0.32 0.62 1.00 45149 15095 ## category3 0.04 0.20 -0.35 0.43 1.00 41891 14836 ## category4 -0.29 0.44 -1.15 0.59 1.00 45376 15554 ## category5 -0.06 0.23 -0.51 0.39 1.00 47168 15949 ## category6 -0.31 0.33 -0.95 0.34 1.00 41542 15426 ## category7 -0.34 0.20 -0.73 0.05 1.00 45232 14342 ## category8 -0.22 0.71 -1.60 1.17 1.00 50058 15058 ## category9 0.01 0.71 -1.38 1.41 1.00 44945 14460 ## category10 -0.43 0.49 -1.39 0.55 1.00 45296 14673 ## category11 -0.49 0.70 -1.86 0.88 1.00 45848 14008 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.98 0.06 0.87 1.12 1.00 35708 13986 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cv1, df$critical_violations_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 23.97 19.74 19.44 28.50 ## A 19.29 20.65 13.40 25.18 ## AE 17.63 20.04 12.64 22.61 ## AEP 16.12 20.50 10.38 21.86 ## AEP+ 11.89 20.04 7.05 16.72 8.6 Intervals of major categories plot_intervals_of_major_categories(cv1) + labs(title=&quot;CV1&quot;, x=&quot;Critical violations per KLOC (std)&quot;) 8.7 Warnings versus no warnings cv1_factor_uses_warnings &lt;- fit_model_cv1(&quot;cv1_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(cv1_factor_uses_warnings) + labs(title=&quot;CV1&quot;, x=&quot;Critical violations per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["major-violations-1.html", "Chapter 9 Major Violations 9.1 Prepare Data 9.2 Compare models 9.3 Prior predictive checks 9.4 Determine natural scale values 9.5 Intervals of major categories 9.6 Warnings versus no warnings 9.7 Without clipp", " Chapter 9 Major Violations This is the section on major violations. 9.1 Prepare Data model_seed &lt;- 20230322 create_major_violations_data &lt;- function(data) { list( major_violations_kloc_std=scale(data$major_violations_kloc), stars_std=scale(data$stars), contributors_std=scale(data$contributors), age_std=scale(get_age(data$created_at)), size_std=scale(data$loc), files_std=scale(data$files) ) } data &lt;- create_major_violations_data(df) data$category &lt;- factor(df$category) data_factor_uses_warnings &lt;- create_major_violations_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 9.1.1 MAV1 fit_model_mav1 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } mav1 &lt;- fit_model_mav1(&quot;mav1&quot;, data) 9.1.2 MAV2 fit_model_mav2 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav2 &lt;- fit_model_mav2(&quot;mav2&quot;, data) 9.1.3 MAV3 fit_model_mav3 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav3 &lt;- fit_model_mav3(&quot;mav3&quot;, data) 9.1.4 MAV4 fit_model_mav4 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav4 &lt;- fit_model_mav4(&quot;mav4&quot;, data) 9.1.5 MAV5 fit_model_mav5 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav5 &lt;- fit_model_mav5(&quot;mav5&quot;, data) 9.1.6 MAV6 fit_model_mav6 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav6 &lt;- fit_model_mav6(&quot;mav6&quot;, data) 9.1.7 MAV7 fit_model_mav7 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav7 &lt;- fit_model_mav7(&quot;mav7&quot;, data) 9.1.8 MAV8 fit_model_mav8 &lt;- function(name, data) { fit_model(name, &quot;major_violations_kloc_std ~ 0 + category + stars_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } mav8 &lt;- fit_model_mav8(&quot;mav8&quot;, data) 9.2 Compare models mav1 &lt;- add_criterion(mav1, criterion=&quot;loo&quot;, moment_match=FALSE) mav2 &lt;- add_criterion(mav1, criterion=&quot;loo&quot;, moment_match=FALSE) mav3 &lt;- add_criterion(mav3, criterion=&quot;loo&quot;, moment_match=FALSE) mav4 &lt;- add_criterion(mav4, criterion=&quot;loo&quot;, moment_match=FALSE) mav5 &lt;- add_criterion(mav5, criterion=&quot;loo&quot;, moment_match=FALSE) mav6 &lt;- add_criterion(mav6, criterion=&quot;loo&quot;, moment_match=FALSE) mav7 &lt;- add_criterion(mav7, criterion=&quot;loo&quot;, moment_match=FALSE) mav8 &lt;- add_criterion(mav8, criterion=&quot;loo&quot;, moment_match=FALSE) print(loo_compare(mav1, mav2, mav3, mav4, mav5, mav6, mav7, mav8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## mav5 0.0 0.0 -205.9 73.1 39.6 37.2 411.7 146.2 ## mav3 -0.1 0.3 -205.9 73.2 38.2 35.9 411.9 146.4 ## mav8 -0.1 0.9 -206.0 72.2 39.2 36.7 411.9 144.3 ## mav4 -0.2 0.7 -206.0 73.6 40.7 38.4 412.1 147.2 ## mav7 -1.2 0.5 -207.1 73.4 39.8 37.1 414.2 146.9 ## mav1 -2.2 3.3 -208.1 76.4 40.9 38.8 416.1 152.7 ## mav2 -2.2 3.3 -208.1 76.4 40.9 38.8 416.1 152.7 ## mav6 -3.0 2.1 -208.9 75.1 42.0 39.3 417.8 150.3 9.3 Prior predictive checks plot_priors(mav5, &quot;Major violations per KLOC (std)&quot;) 9.4 Determine natural scale values summary(mav5) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: major_violations_kloc_std ~ 0 + category + age_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 -0.04 0.20 -0.43 0.35 1.00 42354 15421 ## category2 0.05 0.25 -0.45 0.53 1.00 44003 14490 ## category3 -0.08 0.21 -0.48 0.32 1.00 41600 15539 ## category4 -0.05 0.46 -0.93 0.84 1.00 44974 15441 ## category5 0.49 0.24 0.02 0.96 1.00 45136 14953 ## category6 -0.07 0.34 -0.74 0.61 1.00 47854 15329 ## category7 -0.17 0.21 -0.58 0.23 1.00 46308 15481 ## category8 -0.03 0.72 -1.44 1.40 1.00 46618 14948 ## category9 -0.22 0.72 -1.63 1.21 1.00 47898 13451 ## category10 -0.16 0.51 -1.15 0.83 1.00 43052 14203 ## category11 -0.05 0.71 -1.41 1.33 1.00 45145 15327 ## age_std -0.05 0.10 -0.24 0.14 1.00 36375 16145 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.02 0.07 0.90 1.16 1.00 36061 15340 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(mav5, df$major_violations_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 24.72 37.29 7.42 41.48 ## A 29.43 39.91 7.95 50.91 ## AE 22.62 37.81 4.80 40.43 ## AEP 52.49 39.39 31.53 72.92 ## AEP+ 17.90 37.81 -0.43 35.72 9.5 Intervals of major categories plot_intervals_of_major_categories(mav5) + labs(title=&quot;MAV5&quot;, x=&quot;Major violations per KLOC (std)&quot;) 9.6 Warnings versus no warnings mav5_factor_uses_warnings &lt;- fit_model_mav5(&quot;mav5_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(mav5_factor_uses_warnings) + labs(title=&quot;MAV5&quot;, x=&quot;Major violations per KLOC (std)&quot;) + scale_y_discrete(labels = c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) 9.7 Without clipp culled_df &lt;- df culled_df &lt;- culled_df[culled_df$name != &quot;clipp&quot;, ] culled_data &lt;- create_major_violations_data(culled_df) culled_data$category &lt;- factor(culled_df$category) mav5_culled &lt;- fit_model_mav5(&quot;mav5_culled&quot;, culled_data) summary(mav5_culled) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: major_violations_kloc_std ~ 0 + category + age_std ## Data: data (Number of observations: 126) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.20 0.19 -0.16 0.58 1.00 39939 16039 ## category2 0.45 0.24 -0.03 0.93 1.00 45507 15281 ## category3 -0.04 0.20 -0.44 0.35 1.00 42167 15424 ## category4 0.12 0.45 -0.77 0.99 1.00 44507 14697 ## category5 -0.10 0.24 -0.57 0.37 1.00 44025 14970 ## category6 0.00 0.33 -0.64 0.65 1.00 41144 15066 ## category7 -0.37 0.21 -0.77 0.04 1.00 42398 16197 ## category8 -0.05 0.70 -1.43 1.34 1.00 45600 15076 ## category9 -0.55 0.70 -1.92 0.81 1.00 43032 14761 ## category10 -0.28 0.50 -1.26 0.69 1.00 45305 14731 ## category11 -0.03 0.71 -1.40 1.37 1.00 44914 14344 ## age_std -0.02 0.09 -0.21 0.16 1.00 36346 16962 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.00 0.07 0.88 1.14 1.00 37234 15768 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(mav5_culled, culled_df$major_violations_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 25.53 25.38 20.64 30.59 ## A 29.48 26.17 23.17 35.80 ## AE 21.74 25.53 16.38 26.80 ## AEP 20.80 26.17 14.64 27.11 ## AEP+ 16.53 25.69 11.16 21.90 plot_intervals_of_major_categories(mav5_culled) + labs(title=&quot;MAV5 (culled)&quot;, x=&quot;Major violations per KLOC (std)&quot;) culled_data_factor_uses_warnings &lt;- create_major_violations_data(culled_df) culled_data_factor_uses_warnings$category &lt;- factor(uses_warnings(culled_df$category)) mav5_culled_data_factor_uses_warnings &lt;- fit_model_mav5( &quot;mav5_culled_data_factor_uses_warnings&quot;, culled_data_factor_uses_warnings ) plot_intervals_of_categories(mav5_culled_data_factor_uses_warnings) + labs(title=&quot;MAV5 (culled)&quot;, x=&quot;Major violations per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["minor-violations-1.html", "Chapter 10 Minor Violations 10.1 Prepare data 10.2 Define models 10.3 Compare models 10.4 Prior predictive checks 10.5 Determine natural scale values 10.6 Intervals of major categories 10.7 Warnings versus no warnings", " Chapter 10 Minor Violations This section covers the analysis relating to the “minor violations” metric. 10.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230328 create_minor_violations_data &lt;- function(data) { list( minor_violations_kloc_std=scale(data$minor_violations_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_minor_violations_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_minor_violations_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 10.2 Define models 10.2.1 MIV1 fit_model_miv1 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } miv1 &lt;- fit_model_miv1(&quot;miv1&quot;, data) 10.2.2 MIV2 fit_model_miv2 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv2 &lt;- fit_model_miv2(&quot;miv2&quot;, data) 10.2.3 MIV3 fit_model_miv3 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv3 &lt;- fit_model_miv3(&quot;miv3&quot;, data) 10.2.4 MIV4 fit_model_miv4 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv4 &lt;- fit_model_miv4(&quot;miv4&quot;, data) 10.2.5 MIV5 fit_model_miv5 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv5 &lt;- fit_model_miv5(&quot;miv5&quot;, data) 10.2.6 MIV6 fit_model_miv6 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv6 &lt;- fit_model_miv6(&quot;miv6&quot;, data) 10.2.7 MIV7 fit_model_miv7 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv7 &lt;- fit_model_miv7(&quot;miv7&quot;, data) 10.2.8 MIV8 fit_model_miv8 &lt;- function(name, data) { fit_model(name, &quot;minor_violations_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } miv8 &lt;- fit_model_miv8(&quot;miv8&quot;, data) 10.3 Compare models miv1 &lt;- add_criterion(miv1, criterion=&quot;loo&quot;, moment_match=TRUE) miv2 &lt;- add_criterion(miv2, criterion=&quot;loo&quot;, moment_match=TRUE) miv3 &lt;- add_criterion(miv3, criterion=&quot;loo&quot;, moment_match=TRUE) miv4 &lt;- add_criterion(miv4, criterion=&quot;loo&quot;, moment_match=TRUE) miv5 &lt;- add_criterion(miv5, criterion=&quot;loo&quot;, moment_match=TRUE) miv6 &lt;- add_criterion(miv6, criterion=&quot;loo&quot;, moment_match=TRUE) miv7 &lt;- add_criterion(miv7, criterion=&quot;loo&quot;, moment_match=TRUE) miv8 &lt;- add_criterion(miv8, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(miv1, miv2, miv3, miv4, miv5, miv6, miv7, miv8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## miv2 0.0 0.0 -186.9 20.6 11.7 4.4 373.7 41.1 ## miv1 -0.2 1.2 -187.1 20.0 11.2 4.2 374.2 39.9 ## miv8 -0.4 0.8 -187.2 20.4 11.8 4.2 374.5 40.9 ## miv5 -0.5 1.4 -187.4 19.9 11.8 4.2 374.8 39.8 ## miv7 -0.7 0.5 -187.5 20.4 12.2 4.4 375.0 40.7 ## miv3 -1.0 1.1 -187.9 20.0 11.6 4.2 375.7 39.9 ## miv4 -1.1 1.4 -188.0 19.7 12.6 4.5 375.9 39.3 ## miv6 -1.1 1.4 -188.0 19.8 11.9 4.2 375.9 39.5 10.4 Prior predictive checks plot_priors(miv1, &quot;Minor violations per KLOC (std)&quot;) 10.5 Determine natural scale values summary(miv1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: minor_violations_kloc_std ~ 0 + category ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.27 0.19 -0.10 0.62 1.00 41460 15857 ## category2 0.22 0.24 -0.26 0.69 1.00 40660 14551 ## category3 -0.15 0.20 -0.54 0.24 1.00 42062 15422 ## category4 0.46 0.45 -0.41 1.34 1.00 42785 14357 ## category5 -0.15 0.23 -0.60 0.30 1.00 43833 14175 ## category6 -0.28 0.33 -0.94 0.37 1.00 44582 15647 ## category7 -0.23 0.20 -0.62 0.16 1.00 44434 15385 ## category8 0.42 0.70 -0.96 1.79 1.00 45503 14751 ## category9 0.32 0.71 -1.08 1.71 1.00 46524 14212 ## category10 -0.21 0.50 -1.19 0.78 1.00 45992 15056 ## category11 0.20 0.70 -1.16 1.58 1.00 40440 15454 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.00 0.07 0.88 1.14 1.00 37701 15918 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(miv1, df$minor_violations_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 24.10 22.92 19.54 28.51 ## A 23.36 23.66 17.48 29.25 ## AE 17.92 23.07 13.07 22.78 ## AEP 17.92 23.51 12.33 23.51 ## AEP+ 16.74 23.07 11.89 21.60 10.6 Intervals of major categories plot_intervals_of_major_categories(miv1) + labs(title=&quot;MIV1&quot;, x=&quot;Minor violations per KLOC (std)&quot;) 10.7 Warnings versus no warnings miv1_factor_uses_warnings &lt;- fit_model_miv1(&quot;miv1_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(miv1_factor_uses_warnings) + labs(title=&quot;MIV1&quot;, x=&quot;Minor violations per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["security-hotspots-1.html", "Chapter 11 Security Hotspots 11.1 Prepare data 11.2 Define models 11.3 Compare models 11.4 Prior predictive checks 11.5 Determine natural scale values 11.6 Intervals of major categories 11.7 Warnings versus no warnings", " Chapter 11 Security Hotspots This section covers the analysis relating to the “security hotspots” metric. 11.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230330 create_security_hotspots_data &lt;- function(data) { list( security_hotspots_kloc_std=scale(data$security_hotspots_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_security_hotspots_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_security_hotspots_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 11.2 Define models 11.2.1 S1 fit_model_s1 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } s1 &lt;- fit_model_s1(&quot;s1&quot;, data) 11.2.2 S2 fit_model_s2 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s2 &lt;- fit_model_s2(&quot;s2&quot;, data) 11.2.3 S3 fit_model_s3 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s3 &lt;- fit_model_s3(&quot;s3&quot;, data) 11.2.4 S4 fit_model_s4 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s4 &lt;- fit_model_s4(&quot;s4&quot;, data) 11.2.5 S5 fit_model_s5 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s5 &lt;- fit_model_s5(&quot;s5&quot;, data) 11.2.6 S6 fit_model_s6 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s6 &lt;- fit_model_s6(&quot;s6&quot;, data) 11.2.7 S7 fit_model_s7 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s7 &lt;- fit_model_s7(&quot;s7&quot;, data) 11.2.8 S8 fit_model_s8 &lt;- function(name, data) { fit_model(name, &quot;security_hotspots_kloc_std ~ 0 + category + contributors_std + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } s8 &lt;- fit_model_s8(&quot;s8&quot;, data) 11.3 Compare models s1 &lt;- add_criterion(s1, criterion=&quot;loo&quot;, moment_match=TRUE) s2 &lt;- add_criterion(s2, criterion=&quot;loo&quot;, moment_match=TRUE) s3 &lt;- add_criterion(s3, criterion=&quot;loo&quot;, moment_match=TRUE) s4 &lt;- add_criterion(s4, criterion=&quot;loo&quot;, moment_match=TRUE) s5 &lt;- add_criterion(s5, criterion=&quot;loo&quot;, moment_match=TRUE) s6 &lt;- add_criterion(s6, criterion=&quot;loo&quot;, moment_match=TRUE) s7 &lt;- add_criterion(s7, criterion=&quot;loo&quot;, moment_match=TRUE) s8 &lt;- add_criterion(s8, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(s1, s2, s3, s4, s5, s6, s7, s8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## s2 0.0 0.0 -184.2 16.3 10.5 2.9 368.4 32.6 ## s7 -0.4 0.3 -184.6 16.3 10.8 2.9 369.2 32.5 ## s8 -0.5 0.4 -184.7 16.1 10.8 2.9 369.3 32.3 ## s3 -0.5 0.9 -184.7 16.4 10.5 2.9 369.4 32.8 ## s5 -0.8 0.8 -184.9 16.3 10.5 2.9 369.9 32.7 ## s6 -0.8 0.8 -184.9 16.2 10.5 2.8 369.9 32.3 ## s1 -0.9 1.0 -185.1 16.4 9.9 2.8 370.2 32.7 ## s4 -1.6 1.1 -185.8 16.2 10.3 2.8 371.5 32.5 11.4 Prior predictive checks plot_priors(s2, &quot;Security hotspots per KLOC (std)&quot;) 11.5 Determine natural scale values summary(s2) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: security_hotspots_kloc_std ~ 0 + category + contributors_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.26 0.19 -0.11 0.64 1.00 38535 15885 ## category2 0.19 0.24 -0.27 0.66 1.00 40117 14771 ## category3 -0.20 0.20 -0.59 0.20 1.00 41377 14856 ## category4 -0.45 0.44 -1.32 0.42 1.00 40849 15410 ## category5 -0.10 0.23 -0.55 0.36 1.00 41700 14988 ## category6 -0.17 0.33 -0.83 0.49 1.00 41426 14854 ## category7 0.01 0.20 -0.38 0.40 1.00 41345 14784 ## category8 0.67 0.70 -0.72 2.03 1.00 42738 15545 ## category9 -0.39 0.70 -1.76 0.98 1.00 41750 14354 ## category10 -0.16 0.49 -1.13 0.80 1.00 39520 16059 ## category11 -0.19 0.71 -1.59 1.20 1.00 43311 14421 ## contributors_std -0.17 0.09 -0.36 0.02 1.00 36517 15513 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.99 0.07 0.87 1.13 1.00 35600 15311 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(s2, df$security_hotspots_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 0.97 0.89 0.64 1.30 ## A 0.89 0.94 0.48 1.31 ## AE 0.48 0.90 0.13 0.83 ## AEP 0.58 0.93 0.18 1.00 ## AEP+ 0.70 0.90 0.35 1.04 11.6 Intervals of major categories plot_intervals_of_major_categories(s2) + labs(title=&quot;S2&quot;, x=&quot;Security hotspots per KLOC (std)&quot;) 11.7 Warnings versus no warnings s2_factor_uses_warnings &lt;- fit_model_s2(&quot;s2_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(s2_factor_uses_warnings) + labs(title=&quot;S2&quot;, x=&quot;Security hotspots per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["vulnerabilities-1.html", "Chapter 12 Vulnerabilities 12.1 Prepare data 12.2 Define models 12.3 Compare models 12.4 Prior predictive checks 12.5 Determine natural scale values 12.6 Intervals of major categories 12.7 Warnings versus no warnings", " Chapter 12 Vulnerabilities This section covers the analysis relating to the “vulnerabilities” metric. 12.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230330 create_vulnerabilities_data &lt;- function(data) { list( vulnerabilities_kloc_std=scale(data$vulnerabilities_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_vulnerabilities_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_vulnerabilities_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 12.2 Define models 12.2.1 V1 fit_model_v1 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } v1 &lt;- fit_model_v1(&quot;v1&quot;, data) 12.2.2 V2 fit_model_v2 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v2 &lt;- fit_model_v2(&quot;v2&quot;, data) 12.2.3 V3 fit_model_v3 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v3 &lt;- fit_model_v3(&quot;v3&quot;, data) 12.2.4 V4 fit_model_v4 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v4 &lt;- fit_model_v4(&quot;v4&quot;, data) 12.2.5 V5 fit_model_v5 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v5 &lt;- fit_model_v5(&quot;v5&quot;, data) 12.2.6 V6 fit_model_v6 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v6 &lt;- fit_model_v6(&quot;v6&quot;, data) 12.2.7 V7 fit_model_v7 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v7 &lt;- fit_model_v7(&quot;v7&quot;, data) 12.2.8 V8 fit_model_v8 &lt;- function(name, data) { fit_model(name, &quot;vulnerabilities_kloc_std ~ 0 + category + contributors_std + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } v8 &lt;- fit_model_v8(&quot;v8&quot;, data) 12.3 Compare models v1 &lt;- add_criterion(v1, criterion=&quot;loo&quot;, moment_match=TRUE) v2 &lt;- add_criterion(v2, criterion=&quot;loo&quot;, moment_match=TRUE) v3 &lt;- add_criterion(v3, criterion=&quot;loo&quot;, moment_match=TRUE) v4 &lt;- add_criterion(v4, criterion=&quot;loo&quot;, moment_match=TRUE) v5 &lt;- add_criterion(v5, criterion=&quot;loo&quot;, moment_match=TRUE) v6 &lt;- add_criterion(v6, criterion=&quot;loo&quot;, moment_match=TRUE) v7 &lt;- add_criterion(v7, criterion=&quot;loo&quot;, moment_match=TRUE) v8 &lt;- add_criterion(v8, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(v1, v2, v3, v4, v5, v6, v7, v8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## v1 0.0 0.0 -203.7 53.4 31.0 26.3 407.4 106.9 ## v6 0.0 0.9 -203.7 52.8 32.0 26.3 407.5 105.5 ## v4 -0.2 1.5 -203.9 52.4 31.7 25.8 407.8 104.9 ## v5 -0.5 0.8 -204.2 52.8 32.1 26.4 408.5 105.6 ## v3 -0.7 0.4 -204.3 53.2 32.3 26.7 408.7 106.4 ## v2 -0.7 0.4 -204.4 53.1 32.2 26.6 408.8 106.2 ## v7 -0.9 1.9 -204.6 52.1 32.2 25.9 409.1 104.2 ## v8 -1.0 1.2 -204.7 52.4 31.7 25.5 409.4 104.9 12.4 Prior predictive checks plot_priors(v1, &quot;Vulnerabilities per KLOC (std)&quot;) 12.5 Determine natural scale values summary(v1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: vulnerabilities_kloc_std ~ 0 + category ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 -0.04 0.19 -0.40 0.33 1.00 42992 14564 ## category2 0.44 0.25 -0.04 0.93 1.00 43805 14930 ## category3 0.15 0.20 -0.25 0.55 1.00 43643 15476 ## category4 -0.20 0.46 -1.09 0.69 1.00 40645 14176 ## category5 -0.10 0.24 -0.57 0.38 1.00 40690 14068 ## category6 -0.07 0.34 -0.73 0.59 1.00 45654 15086 ## category7 -0.22 0.21 -0.62 0.18 1.00 42059 14592 ## category8 -0.12 0.70 -1.49 1.26 1.00 41430 15549 ## category9 -0.12 0.70 -1.51 1.25 1.00 43522 15179 ## category10 -0.18 0.52 -1.21 0.83 1.00 46680 14348 ## category11 -0.13 0.71 -1.51 1.24 1.00 44577 14936 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.01 0.07 0.89 1.15 1.00 34272 15316 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(v1, df$vulnerabilities_kloc, precision=6)) ## Mean SD 0.05 CI 0.95 CI ## N 0.006849 0.014115 -0.003162 0.016899 ## A 0.022476 0.016060 0.009269 0.035717 ## AE 0.012868 0.014587 0.002055 0.023660 ## AEP 0.004848 0.015799 -0.008017 0.017773 ## AEP+ 0.000951 0.014693 -0.010096 0.011965 12.6 Intervals of major categories plot_intervals_of_major_categories(v1) + labs(title=&quot;V1&quot;, x=&quot;Vulnerabilities per KLOC (std)&quot;) 12.7 Warnings versus no warnings v1_factor_uses_warnings &lt;- fit_model_v1(&quot;v1_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(v1_factor_uses_warnings) + labs(title=&quot;V1&quot;, x=&quot;Vulnerabilities per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["cyclomatic-complexity-1.html", "Chapter 13 Cyclomatic Complexity 13.1 Prepare data 13.2 Define models 13.3 Compare models 13.4 Prior predictive checks 13.5 Determine natural scale values 13.6 Intervals of major categories 13.7 Warnings versus no warnings 13.8 Without outliers", " Chapter 13 Cyclomatic Complexity This section covers the analysis relating to the cyclomatic complexity metric. 13.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230331 create_cyclomatic_complexity_data &lt;- function(data) { list( cyclomatic_complexity_kloc_std=scale(data$cyclomatic_complexity_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_cyclomatic_complexity_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_cyclomatic_complexity_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 13.2 Define models 13.2.1 CYC1 fit_model_cyc1 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } cyc1 &lt;- fit_model_cyc1(&quot;cyc1&quot;, data) 13.2.2 CYC2 fit_model_cyc2 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc2 &lt;- fit_model_cyc2(&quot;cyc2&quot;, data) 13.2.3 CYC3 fit_model_cyc3 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc3 &lt;- fit_model_cyc3(&quot;cyc3&quot;, data) 13.2.4 CYC4 fit_model_cyc4 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc4 &lt;- fit_model_cyc4(&quot;cyc4&quot;, data) 13.2.5 CYC5 fit_model_cyc5 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc5 &lt;- fit_model_cyc5(&quot;cyc5&quot;, data) 13.2.6 CYC6 fit_model_cyc6 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc6 &lt;- fit_model_cyc6(&quot;cyc6&quot;, data) 13.2.7 CYC7 fit_model_cyc7 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + size_std + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc7 &lt;- fit_model_cyc7(&quot;cyc7&quot;, data) 13.2.8 CYC8 fit_model_cyc8 &lt;- function(name, data) { fit_model(name, &quot;cyclomatic_complexity_kloc_std ~ 0 + category + size_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cyc8 &lt;- fit_model_cyc8(&quot;cyc8&quot;, data) 13.3 Compare models cyc1 &lt;- add_criterion(cyc1, criterion=&quot;loo&quot;, moment_match=FALSE) cyc2 &lt;- add_criterion(cyc2, criterion=&quot;loo&quot;, moment_match=FALSE) cyc3 &lt;- add_criterion(cyc3, criterion=&quot;loo&quot;, moment_match=FALSE) cyc4 &lt;- add_criterion(cyc4, criterion=&quot;loo&quot;, moment_match=FALSE) cyc5 &lt;- add_criterion(cyc5, criterion=&quot;loo&quot;, moment_match=FALSE) cyc6 &lt;- add_criterion(cyc6, criterion=&quot;loo&quot;, moment_match=FALSE) cyc7 &lt;- add_criterion(cyc7, criterion=&quot;loo&quot;, moment_match=FALSE) cyc8 &lt;- add_criterion(cyc8, criterion=&quot;loo&quot;, moment_match=FALSE) print(loo_compare(cyc1, cyc2, cyc3, cyc4, cyc5, cyc6, cyc7, cyc8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## cyc7 0.0 0.0 -198.7 54.9 28.1 24.0 397.5 109.8 ## cyc4 -0.2 1.2 -199.0 56.1 28.6 24.8 398.0 112.2 ## cyc3 -1.1 1.3 -199.8 56.1 29.7 25.8 399.6 112.2 ## cyc8 -1.1 0.5 -199.9 55.2 29.5 25.4 399.8 110.4 ## cyc5 -1.3 1.0 -200.0 54.3 27.8 24.0 400.1 108.7 ## cyc6 -2.4 0.8 -201.2 55.2 29.6 25.6 402.3 110.3 ## cyc2 -2.8 1.1 -201.5 55.7 29.8 25.8 403.0 111.3 ## cyc1 -3.1 2.2 -201.9 57.0 30.5 26.8 403.7 114.0 13.4 Prior predictive checks plot_priors(cyc7, &quot;Cyclomatic complexity per KLOC (std)&quot;) 13.5 Determine natural scale values summary(cyc7) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: cyclomatic_complexity_kloc_std ~ 0 + category + size_std + files_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 -0.17 0.19 -0.54 0.21 1.00 24639 15428 ## category2 0.20 0.25 -0.28 0.69 1.00 27319 15493 ## category3 -0.04 0.21 -0.44 0.37 1.00 23064 15118 ## category4 0.16 0.45 -0.71 1.06 1.00 24944 15074 ## category5 0.04 0.24 -0.45 0.52 1.00 24732 15635 ## category6 -0.13 0.34 -0.81 0.55 1.00 23470 15194 ## category7 0.16 0.20 -0.24 0.56 1.00 26228 15503 ## category8 -0.32 0.70 -1.70 1.07 1.00 24102 15462 ## category9 -0.23 0.71 -1.63 1.17 1.00 26667 15916 ## category10 -0.05 0.50 -1.05 0.93 1.00 25664 15574 ## category11 -0.33 0.71 -1.73 1.05 1.00 26261 15958 ## size_std -0.03 0.17 -0.36 0.30 1.00 15781 14130 ## files_std -0.16 0.17 -0.49 0.17 1.00 15694 14015 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.01 0.07 0.89 1.16 1.00 20506 14284 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cyc7, df$cyclomatic_complexity_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 137.50 177.31 103.21 172.89 ## A 178.42 183.95 133.07 223.77 ## AE 151.87 179.53 115.38 189.48 ## AEP 160.72 182.84 116.48 204.96 ## AEP+ 174.00 178.42 136.39 211.60 13.6 Intervals of major categories plot_intervals_of_major_categories(cyc7) + labs(title=&quot;CYC7&quot;, x=&quot;Cyclomatic complexity per KLOC (std)&quot;) 13.7 Warnings versus no warnings cyc7_factor_uses_warnings &lt;- fit_model_cyc7(&quot;cyc7_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(cyc7_factor_uses_warnings) + labs(title=&quot;CYC7&quot;, x=&quot;Cyclomatic complexity per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) 13.8 Without outliers Category AEP+ has a notable outlier, “better-enums”. We will remove it from the sample population to see how this affects the analysis results. df_culled &lt;- df df_culled &lt;- df_culled[df_culled$name != &quot;better-enums&quot;,] culled_data &lt;- create_cyclomatic_complexity_data(df_culled) culled_data$category &lt;- factor(df_culled$category) cyc7_culled &lt;- fit_model_cyc7(&quot;cyc7_no_outliers&quot;, culled_data) summary(cyc7_culled) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: cyclomatic_complexity_kloc_std ~ 0 + category + size_std + files_std ## Data: data (Number of observations: 126) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 -0.16 0.18 -0.52 0.20 1.00 28541 15270 ## category2 0.48 0.24 0.01 0.95 1.00 27517 15610 ## category3 0.04 0.20 -0.35 0.42 1.00 27561 15404 ## category4 0.43 0.44 -0.44 1.29 1.00 27417 15041 ## category5 0.19 0.23 -0.27 0.64 1.00 27157 15107 ## category6 -0.12 0.33 -0.76 0.53 1.00 25993 15579 ## category7 -0.25 0.20 -0.65 0.15 1.00 26249 13947 ## category8 -0.53 0.69 -1.89 0.81 1.00 26834 15748 ## category9 -0.35 0.70 -1.72 1.01 1.00 27147 14892 ## category10 0.01 0.49 -0.95 0.98 1.00 27074 15230 ## category11 -0.54 0.69 -1.90 0.83 1.00 27614 15836 ## size_std -0.04 0.16 -0.35 0.28 1.00 14973 14417 ## files_std -0.26 0.16 -0.57 0.06 1.00 16403 15154 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.97 0.06 0.85 1.11 1.00 22460 14588 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cyc7_culled, df_culled$cyclomatic_complexity_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 138.31 159.13 119.94 156.68 ## A 177.50 162.81 153.62 201.38 ## AE 150.56 160.36 130.35 170.15 ## AEP 159.75 162.19 136.48 183.01 ## AEP+ 132.80 160.36 111.98 153.01 We can now plot the credible intervals of the major categories again, and see that AEP+ has dramatically improved as a result of removing the outlier. The plot indicates that there is no clear correlation between use of compiler warnings and cyclomatic complexity. plot_intervals_of_major_categories(cyc7_culled) + labs(title=&quot;CYC7 (culled)&quot;, x=&quot;Cyclomatic complexity per KLOC (std)&quot;) However, projects that do not use warnings still have lower cyclomatic complexity than those who do use warnings. data_cyc_factor_uses_warnings &lt;- create_cyclomatic_complexity_data(df_cyc) data_cyc_factor_uses_warnings$category &lt;- factor(uses_warnings(df_cyc$category)) cyc7_culled_factor_uses_warnings &lt;- fit_model_cyc7(&quot;cyc7_no_outliers_factor_uses_warnings&quot;, data_cyc_factor_uses_warnings) plot_intervals_of_categories(cyc7_culled_factor_uses_warnings) + labs(title=&quot;CYC7 (culled)&quot;, x=&quot;Cyclomatic complexity per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["cognitive-complexity-1.html", "Chapter 14 Cognitive Complexity 14.1 Prepare data 14.2 Define models 14.3 Compare models 14.4 Prior predictive checks 14.5 Determine natural scale values 14.6 Credible intervals of major categories 14.7 Warnings versus no warnings", " Chapter 14 Cognitive Complexity This section covers the analysis relating to the cognitive complexity metric. 14.1 Prepare data model_seed &lt;- 20230403 # Analysis conducted on April 4, 2023 create_cognitive_complexity_data &lt;- function(data) { list( cognitive_complexity_kloc_std=scale(data$cognitive_complexity_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } data &lt;- create_cognitive_complexity_data(df) data$category &lt;- factor(df$category) 14.2 Define models 14.2.1 COG1 fit_model_cog1 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } cog1 &lt;- fit_model_cog1(&quot;cog1&quot;, data) 14.2.2 COG2 fit_model_cog2 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog2 &lt;- fit_model_cog2(&quot;cog2&quot;, data) 14.2.3 COG3 fit_model_cog3 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog3 &lt;- fit_model_cog3(&quot;cog3&quot;, data) 14.2.4 COG4 fit_model_cog4 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog4 &lt;- fit_model_cog4(&quot;cog4&quot;, data) 14.2.5 COG5 fit_model_cog5 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog5 &lt;- fit_model_cog5(&quot;cog5&quot;, data) 14.2.6 COG6 fit_model_cog6 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog6 &lt;- fit_model_cog6(&quot;cog6&quot;, data) 14.2.7 COG7 fit_model_cog7 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + size_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog7 &lt;- fit_model_cog7(&quot;cog7&quot;, data) 14.2.8 COG8 fit_model_cog8 &lt;- function(name, data) { fit_model(name, &quot;cognitive_complexity_kloc_std ~ 0 + category + size_std + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } cog8 &lt;- fit_model_cog8(&quot;cog8&quot;, data) 14.3 Compare models cog1 &lt;- add_criterion(cog1, criterion=&quot;loo&quot;, moment_match=TRUE) cog2 &lt;- add_criterion(cog2, criterion=&quot;loo&quot;, moment_match=TRUE) cog3 &lt;- add_criterion(cog3, criterion=&quot;loo&quot;, moment_match=TRUE) cog4 &lt;- add_criterion(cog4, criterion=&quot;loo&quot;, moment_match=TRUE) cog5 &lt;- add_criterion(cog5, criterion=&quot;loo&quot;, moment_match=TRUE) cog6 &lt;- add_criterion(cog6, criterion=&quot;loo&quot;, moment_match=TRUE) cog7 &lt;- add_criterion(cog7, criterion=&quot;loo&quot;, moment_match=TRUE) cog8 &lt;- add_criterion(cog8, criterion=&quot;loo&quot;, moment_match=TRUE) print(loo_compare(cog1, cog2, cog3, cog4, cog5, cog6, cog7, cog8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## cog5 0.0 0.0 -178.7 11.3 12.0 2.9 357.5 22.5 ## cog8 -0.9 2.7 -179.7 11.7 12.6 2.9 359.3 23.4 ## cog4 -2.4 1.5 -181.2 11.3 11.6 2.8 362.3 22.5 ## cog3 -2.9 3.1 -181.6 12.3 11.8 3.0 363.2 24.6 ## cog1 -3.2 2.3 -182.0 11.8 11.0 2.8 364.0 23.5 ## cog7 -3.4 1.5 -182.1 11.4 12.7 3.0 364.3 22.8 ## cog2 -3.8 2.8 -182.6 12.0 12.5 3.4 365.1 24.0 ## cog6 -4.4 2.4 -183.1 11.8 12.1 3.1 366.2 23.6 14.4 Prior predictive checks plot_priors(cog5, &quot;Cognitive complexity per KLOC (std)&quot;) 14.5 Determine natural scale values summary(cog5) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: cognitive_complexity_kloc_std ~ 0 + category + files_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 -0.22 0.18 -0.56 0.13 1.00 38115 15725 ## category2 0.44 0.23 -0.01 0.89 1.00 40826 14941 ## category3 0.33 0.19 -0.06 0.71 1.00 38934 14939 ## category4 -0.40 0.43 -1.24 0.43 1.00 39467 13997 ## category5 0.47 0.22 0.03 0.91 1.00 41165 14414 ## category6 -0.25 0.32 -0.86 0.37 1.00 42885 14560 ## category7 -0.50 0.19 -0.87 -0.12 1.00 39110 14053 ## category8 -0.69 0.68 -2.02 0.65 1.00 42832 15226 ## category9 -0.04 0.69 -1.39 1.31 1.00 41813 14193 ## category10 0.42 0.47 -0.51 1.34 1.00 39381 14067 ## category11 -0.67 0.68 -2.01 0.68 1.00 40782 14026 ## files_std -0.25 0.09 -0.42 -0.08 1.00 35824 16599 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.93 0.06 0.82 1.06 1.00 34586 15202 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(cog5, df$cognitive_complexity_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 94.75 121.61 75.28 114.22 ## A 139.07 124.97 114.22 164.58 ## AE 131.68 122.28 110.19 153.17 ## AEP 141.08 124.29 116.24 165.25 ## AEP+ 75.95 122.28 55.13 97.44 14.6 Credible intervals of major categories plot_intervals_of_major_categories(cog5) + labs(title=&quot;COG5&quot;, x=&quot;Cognitive complexity per KLOC (std)&quot;) 14.7 Warnings versus no warnings data_factor_uses_warnings &lt;- create_cognitive_complexity_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) cog5_factor_uses_warnings &lt;- fit_model_cog5(&quot;cog5_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(cog5_factor_uses_warnings) + labs(title=&quot;COG5&quot;, x=&quot;Cognitive complexity per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["duplicated-lines-1.html", "Chapter 15 Duplicated Lines 15.1 Prepare data 15.2 Define models 15.3 Compare models 15.4 Prior predictive checks 15.5 Determine natural scale values 15.6 Credible intervals of major categories 15.7 Warnings versus no warnings", " Chapter 15 Duplicated Lines This section covers the analysis relating to the “duplicated lines” metric. 15.1 Prepare data # The model seed is the date that the analysis was conducted model_seed &lt;- 20230403 create_duplicated_lines_data &lt;- function(data) { list( duplicated_lines_kloc_std=scale(data$duplicated_lines_kloc), contributors_std=scale(data$contributors), stars_std=scale(data$stars), files_std=scale(data$files), size_std=scale(data$loc), age_std=scale(get_age(data$created_at)) ) } # Prepare data with all categories as factors (1-11). data &lt;- create_duplicated_lines_data(df) data$category &lt;- factor(df$category) # Prepare data that factors on the presence of compiler warnings data_factor_uses_warnings &lt;- create_duplicated_lines_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 15.2 Define models 15.2.1 D1 fit_model_d1 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } d1 &lt;- fit_model_d1(&quot;d1&quot;, data) 15.2.2 D2 fit_model_d2 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d2 &lt;- fit_model_d2(&quot;d2&quot;, data) 15.2.3 D3 fit_model_d3 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d3 &lt;- fit_model_d3(&quot;d3&quot;, data) 15.2.4 D4 fit_model_d4 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d4 &lt;- fit_model_d4(&quot;d4&quot;, data) 15.2.5 D5 fit_model_d5 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d5 &lt;- fit_model_d5(&quot;d5&quot;, data) 15.2.6 D6 fit_model_d6 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d6 &lt;- fit_model_d6(&quot;d6&quot;, data) 15.2.7 D7 fit_model_d7 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + contributors_std + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d7 &lt;- fit_model_d7(&quot;d7&quot;, data) 15.2.8 D8 fit_model_d8 &lt;- function(name, data) { fit_model(name, &quot;duplicated_lines_kloc_std ~ 0 + category + contributors_std + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } d8 &lt;- fit_model_d8(&quot;d8&quot;, data) 15.3 Compare models d1 &lt;- add_criterion(d1, criterion=&quot;loo&quot;) d2 &lt;- add_criterion(d2, criterion=&quot;loo&quot;) d3 &lt;- add_criterion(d3, criterion=&quot;loo&quot;) d4 &lt;- add_criterion(d4, criterion=&quot;loo&quot;) d5 &lt;- add_criterion(d5, criterion=&quot;loo&quot;) d6 &lt;- add_criterion(d6, criterion=&quot;loo&quot;) d7 &lt;- add_criterion(d7, criterion=&quot;loo&quot;) d8 &lt;- add_criterion(d8, criterion=&quot;loo&quot;) print(loo_compare(d1, d2, d3, d4, d5, d6, d7, d8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## d6 0.0 0.0 -179.8 14.9 12.4 3.1 359.6 29.9 ## d5 -0.4 1.8 -180.2 14.7 12.2 2.9 360.5 29.4 ## d1 -1.1 2.5 -180.9 15.0 10.9 2.8 361.8 29.9 ## d8 -1.4 1.8 -181.2 14.8 13.2 3.2 362.4 29.6 ## d4 -1.5 3.2 -181.3 14.9 11.8 2.9 362.7 29.9 ## d2 -2.0 2.6 -181.8 14.9 11.7 2.9 363.7 29.7 ## d7 -2.5 3.2 -182.3 14.8 12.5 2.9 364.5 29.7 ## d3 -2.9 2.7 -182.7 15.3 13.1 3.8 365.3 30.5 15.4 Prior predictive checks plot_priors(d6, &quot;Duplicated lines per KLOC (std)&quot;) 15.5 Determine natural scale values summary(d6) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: duplicated_lines_kloc_std ~ 0 + category + files_std ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.18 0.18 -0.17 0.53 1.00 41570 14094 ## category2 -0.26 0.23 -0.71 0.19 1.00 44247 15589 ## category3 -0.11 0.20 -0.50 0.28 1.00 39343 14985 ## category4 -0.32 0.43 -1.16 0.50 1.00 43679 15449 ## category5 0.15 0.22 -0.29 0.59 1.00 42408 13689 ## category6 1.12 0.32 0.51 1.74 1.00 43649 14885 ## category7 -0.30 0.19 -0.67 0.08 1.00 42457 15177 ## category8 0.02 0.70 -1.35 1.40 1.00 39992 12925 ## category9 -0.23 0.69 -1.58 1.12 1.00 40710 14163 ## category10 -0.24 0.48 -1.18 0.70 1.00 42945 14202 ## category11 -0.29 0.69 -1.64 1.05 1.00 45064 15114 ## files_std 0.19 0.09 0.02 0.37 1.00 38437 16696 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.94 0.06 0.83 1.08 1.00 36199 16405 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(d6, df$duplicated_lines_kloc)) ## Mean SD 0.05 CI 0.95 CI ## N 116.38 116.38 81.28 151.48 ## A 63.12 122.43 18.33 109.11 ## AE 81.28 118.80 42.54 120.01 ## AEP 112.75 121.22 67.96 157.53 ## AEP+ 58.28 117.59 20.75 97.01 15.6 Credible intervals of major categories plot_intervals_of_major_categories(d6) + labs(title=&quot;D6&quot;, x=&quot;Duplicated lines per KLOC (std)&quot;) 15.7 Warnings versus no warnings d6_factor_uses_warnings &lt;- fit_model_d6(&quot;d6_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(d6_factor_uses_warnings) + labs(title=&quot;D6&quot;, x=&quot;Duplicated lines per KLOC (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["technical-debt-ratio-1.html", "Chapter 16 Technical Debt Ratio 16.1 Prepare data 16.2 Define Models 16.3 Compare models 16.4 Prior predictive checks 16.5 Determine natural scale values 16.6 Intervals of major categories 16.7 Warnings versus no warnings 16.8 Without outliers", " Chapter 16 Technical Debt Ratio This section covers the analysis relating to the technical debt ratio metric. 16.1 Prepare data model_seed &lt;- 20230302 create_tech_debt_data &lt;- function(data) { list( tech_debt_std=scale(data$sqale_debt_ratio), contributors_std=scale(data$contributors), stars_std=scale(data$stars), age_std=scale(get_age(data$created_at)), files_std=scale(data$files), size_std=scale(data$loc) ) } data &lt;- create_tech_debt_data(df) data$category &lt;- factor(df$category) data_factor_uses_warnings &lt;- create_tech_debt_data(df) data_factor_uses_warnings$category &lt;- factor(uses_warnings(df$category)) 16.2 Define Models 16.2.1 TD1 fit_model_td1 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category&quot;, c( prior(normal(0, 1), class=b), prior(exponential(1), class=sigma) ), data, model_seed) } td1 &lt;- fit_model_td1(&quot;td1&quot;, data) 16.2.2 TD2 fit_model_td2 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td2 &lt;- fit_model_td2(&quot;td2&quot;, data) 16.2.3 TD3 fit_model_td3 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + contributors_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td3 &lt;- fit_model_td3(&quot;td3&quot;, data) 16.2.4 TD4 fit_model_td4 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + size_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;size_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td4 &lt;- fit_model_td4(&quot;td4&quot;, data) 16.2.5 TD5 fit_model_td5 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + age_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;age_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td5 &lt;- fit_model_td5(&quot;td5&quot;, data) 16.2.6 TD6 fit_model_td6 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td6 &lt;- fit_model_td6(&quot;td6&quot;, data) 16.2.7 TD7 fit_model_td7 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + contributors_std + files_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;files_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td7 &lt;- fit_model_td7(&quot;td7&quot;, data) 16.2.8 TD8 fit_model_td8 &lt;- function(name, data) { fit_model(name, &quot;tech_debt_std ~ 0 + category + contributors_std + stars_std&quot;, c( prior(normal(0, 1), class=b), prior(normal(0, 1), class=b, coef=&quot;contributors_std&quot;), prior(normal(0, 1), class=b, coef=&quot;stars_std&quot;), prior(exponential(1), class=sigma) ), data, model_seed) } td8 &lt;- fit_model_td8(&quot;td8&quot;, data) 16.3 Compare models td1 &lt;- add_criterion(td1, &quot;loo&quot;, moment_match=TRUE) td2 &lt;- add_criterion(td2, &quot;loo&quot;, moment_match=TRUE) td3 &lt;- add_criterion(td3, &quot;loo&quot;, moment_match=TRUE) td4 &lt;- add_criterion(td4, &quot;loo&quot;, moment_match=TRUE) td5 &lt;- add_criterion(td5, &quot;loo&quot;, moment_match=TRUE) td6 &lt;- add_criterion(td6, &quot;loo&quot;, moment_match=TRUE) td7 &lt;- add_criterion(td7, &quot;loo&quot;, moment_match=TRUE) td8 &lt;- add_criterion(td8, &quot;loo&quot;, moment_match=TRUE) print(loo_compare(td1, td2, td3, td4, td5, td6, td7, td8, criterion=&quot;loo&quot;), simplify=FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic se_looic ## td3 0.0 0.0 -190.2 27.8 15.6 9.0 380.3 55.6 ## td2 0.0 1.2 -190.2 28.1 15.5 9.0 380.3 56.3 ## td1 -0.2 1.2 -190.4 28.4 15.0 9.1 380.7 56.8 ## td4 -0.2 0.8 -190.4 27.8 15.6 8.9 380.8 55.7 ## td7 -0.4 0.7 -190.6 27.7 16.3 9.1 381.2 55.3 ## td6 -0.6 0.9 -190.8 28.1 15.4 9.1 381.5 56.2 ## td8 -0.7 0.3 -190.8 27.6 15.9 9.0 381.6 55.1 ## td5 -1.2 1.6 -191.3 28.6 16.1 9.4 382.7 57.2 16.4 Prior predictive checks plot_priors(td1, &quot;Technical debt ratio (std)&quot;) 16.5 Determine natural scale values summary(td1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: tech_debt_std ~ 0 + category ## Data: data (Number of observations: 127) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.26 0.19 -0.10 0.62 1.00 40959 14961 ## category2 0.18 0.24 -0.30 0.66 1.00 41129 15985 ## category3 -0.08 0.21 -0.49 0.33 1.00 41392 14620 ## category4 -0.21 0.45 -1.10 0.68 1.00 40386 14878 ## category5 0.23 0.24 -0.23 0.68 1.00 41390 15553 ## category6 -0.17 0.33 -0.83 0.50 1.00 40790 14542 ## category7 -0.30 0.20 -0.70 0.09 1.00 41666 14535 ## category8 -0.15 0.69 -1.50 1.24 1.00 41612 15602 ## category9 -0.30 0.70 -1.68 1.10 1.00 35900 14973 ## category10 -0.30 0.51 -1.29 0.70 1.00 40784 15183 ## category11 -0.19 0.70 -1.56 1.18 1.00 42980 15626 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.01 0.07 0.89 1.14 1.00 33325 15600 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(td1, df$sqale_debt_ratio)) ## Mean SD 0.05 CI 0.95 CI ## N 2.16 2.06 1.74 2.57 ## A 2.05 2.13 1.51 2.59 ## AE 1.70 2.09 1.24 2.16 ## AEP 2.12 2.13 1.59 2.65 ## AEP+ 1.40 2.08 0.94 1.85 16.6 Intervals of major categories plot_intervals_of_major_categories(td1) + labs(title=&quot;TD1&quot;, x=&quot;Technical debt ratio (std)&quot;) 16.7 Warnings versus no warnings td1_factor_uses_warnings &lt;- fit_model_td1(&quot;td1_factor_uses_warnings&quot;, data_factor_uses_warnings) plot_intervals_of_categories(td1_factor_uses_warnings) + labs(title=&quot;TD1&quot;, x=&quot;Technical debt ratio (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) 16.8 Without outliers df_culled &lt;- df df_culled &lt;- df_culled[df_culled$name != &quot;clipp&quot;,] culled_data &lt;- create_tech_debt_data(df_culled) culled_data$category &lt;- factor(df_culled$category) td1_culled &lt;- fit_model_td1(&quot;td1_no_outliers&quot;, culled_data) summary(td1_culled) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: tech_debt_std ~ 0 + category ## Data: data (Number of observations: 126) ## Draws: 4 chains, each with iter = 10000; warmup = 5000; thin = 1; ## total post-warmup draws = 20000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## category1 0.38 0.19 0.02 0.75 1.00 42679 14675 ## category2 0.29 0.24 -0.19 0.76 1.00 42739 14048 ## category3 -0.04 0.20 -0.44 0.35 1.00 44436 14018 ## category4 -0.21 0.44 -1.06 0.66 1.00 44171 14371 ## category5 -0.12 0.24 -0.59 0.35 1.00 41757 14359 ## category6 -0.15 0.34 -0.81 0.52 1.00 43307 14328 ## category7 -0.31 0.20 -0.71 0.08 1.00 44718 14456 ## category8 -0.15 0.70 -1.53 1.24 1.00 42255 14356 ## category9 -0.34 0.70 -1.73 1.05 1.00 39714 13798 ## category10 -0.32 0.50 -1.31 0.66 1.00 44622 14541 ## category11 -0.20 0.70 -1.58 1.16 1.00 45338 15277 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 1.00 0.07 0.88 1.13 1.00 36024 14614 ## ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). print(create_natural_scale_summary_df(td1_culled, df_culled$sqale_debt_ratio)) ## Mean SD 0.05 CI 0.95 CI ## N 2.15 1.94 1.82 2.49 ## A 2.05 2.00 1.61 2.48 ## AE 1.69 1.95 1.33 2.05 ## AEP 1.60 2.00 1.16 2.04 ## AEP+ 1.39 1.95 1.02 1.76 plot_intervals_of_major_categories(td1_culled) + labs(title=&quot;TD1 (culled)&quot;, x=&quot;Technical debt ratio (std)&quot;) culled_data_factor_uses_warnings &lt;- create_tech_debt_data(df_culled) culled_data_factor_uses_warnings$category &lt;- factor(uses_warnings(df_culled$category)) td1_culled_factor_uses_warnings &lt;- fit_model_td1(&quot;td1_data_no_outliers_factor_uses_warnings&quot;, culled_data_factor_uses_warnings) plot_intervals_of_categories(td1_culled_factor_uses_warnings) + labs(title=&quot;TD1 (culled)&quot;, x=&quot;Technical debt ratio (std)&quot;) + scale_y_discrete(labels=c( &quot;b_category1&quot;=&quot;No warnings&quot;, &quot;b_category2&quot;=&quot;Any warnings&quot; )) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
